_lista # https://cdn.jsdelivr.net/gh/angelonuffer/lista@2efb5d2699ae928fc7d2b29be6783ae06670415a/código/0
processo # https://cdn.jsdelivr.net/gh/angelonuffer/processo@28301145e902c160e4e8037953ab6b0483270c94/código/0

compara_listas = { lista_1 lista_2 } =>
  | lista_1[.] != lista_2[.] = 0
  | lista_1[.] == 0 = 1
  | lista_1[0] != lista_2[0] = 0
  | (
    _lista_1 = lista_1
    _lista_2 = lista_2
    compara_listas({
      lista_1: _lista_1[1:]
      lista_2: _lista_2[1:]
    })
  )

exibir = { passaram mensagens } => processo.nodejs({
  comandos: [
    ..._lista.mapear({
      lista: mensagens
      função: mensagem => processo.escreva({
        texto: mensagem
      })
    })
    processo.escreva({
      texto: passaram + "/" + mensagens[.] + " testes passaram."
    })
    passaram == mensagens[.] ?
      processo.saia({
        código: 0
      })
    :
      processo.saia({
        código: 1
      })
  ]
})

{
  descrever: { nome testes } => destino => (
    resultado = {
      passaram: _lista.reduzir({
        lista: _lista.mapear({
          lista: testes
          função: resultado => (resultado("descrever")).passaram
        })
        função: args => args[0] + args[1]
      })
      mensagens: _lista.planificar({
        lista: _lista.mapear({
          lista: testes
          função: resultado => _lista.mapear({
            lista: (resultado("descrever")).mensagens
            função: mensagem => [
              nome
              " | "
              mensagem
            ] * ""
          })
        })
      })
    }
    destino == "descrever" ? resultado : exibir(resultado)
  )
  iguais: args => destino => (
    _passaram = args[0] == args[1] ? 1 : 0
    resultado = {
      passaram: _passaram
      mensagens: [
        _passaram == 1 ? "ok" : [
          "Esperava que "
          "" + args[0]
          " fosse igual a "
          "" + args[1]
          "."
        ] * ""
      ]
    }
    destino == "descrever" ? resultado : exibir(resultado)
  )
  listas_iguais: args => destino => (
    _passaram = compara_listas({
      lista_1: args[0]
      lista_2: args[1]
    }) ? 1 : 0
    resultado = {
      passaram: _passaram
      mensagens: [
        _passaram == 1 ? "ok" : [
          "Esperava que ["
          args[0] * ", "
          "] fosse igual a ["
          args[1] * ", "
          "]."
        ] * ""
      ]
    }
    destino == "descrever" ? resultado : exibir(resultado)
  )
}
